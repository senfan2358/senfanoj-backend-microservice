/*
 Navicat Premium Data Transfer

 Source Server         : 8.136.121.109
 Source Server Type    : MySQL
 Source Server Version : 80030
 Source Host           : 8.136.121.109:3306
 Source Schema         : senfanoj

 Target Server Type    : MySQL
 Target Server Version : 80030
 File Encoding         : 65001

 Date: 05/03/2024 19:14:47
*/
-- 创建库
create database if not exists senfanoj;

-- 切换库
use senfanoj;
SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for post
-- ----------------------------
DROP TABLE IF EXISTS `post`;
CREATE TABLE `post`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '标题',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL COMMENT '内容',
  `tags` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '标签列表（json 数组）',
  `thumbNum` int NOT NULL DEFAULT 0 COMMENT '点赞数',
  `favourNum` int NOT NULL DEFAULT 0 COMMENT '收藏数',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_userId`(`userId` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '帖子' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of post
-- ----------------------------

-- ----------------------------
-- Table structure for post_favour
-- ----------------------------
DROP TABLE IF EXISTS `post_favour`;
CREATE TABLE `post_favour`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `postId` bigint NOT NULL COMMENT '帖子 id',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_postId`(`postId` ASC) USING BTREE,
  INDEX `idx_userId`(`userId` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = '帖子收藏' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of post_favour
-- ----------------------------

-- ----------------------------
-- Table structure for post_thumb
-- ----------------------------
DROP TABLE IF EXISTS `post_thumb`;
CREATE TABLE `post_thumb`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `postId` bigint NOT NULL COMMENT '帖子 id',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_postId`(`postId` ASC) USING BTREE,
  INDEX `idx_userId`(`userId` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = '帖子点赞' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of post_thumb
-- ----------------------------

-- ----------------------------
-- Table structure for question
-- ----------------------------
DROP TABLE IF EXISTS `question`;
CREATE TABLE `question`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `title` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '标题',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL COMMENT '内容',
  `tags` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '标签列表（json 数组）',
  `answer` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL COMMENT '题目答案',
  `submitNum` int NOT NULL DEFAULT 0 COMMENT '题目提交数',
  `acceptedNum` int NOT NULL DEFAULT 0 COMMENT '题目通过数',
  `judgeCase` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL COMMENT '判题用例（json 数组）',
  `judgeConfig` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL COMMENT '判题配置（json 对象）',
  `thumbNum` int NOT NULL DEFAULT 0 COMMENT '点赞数',
  `favourNum` int NOT NULL DEFAULT 0 COMMENT '收藏数',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_userId`(`userId` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1764284847997399042 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '题目' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of question
-- ----------------------------
INSERT INTO `question` VALUES (1754780655998218241, 'A+B', '##  1.两数之和\n\n给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出 **和为目标值** *`target`* 的那 **两个** 整数，并返回它们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n\n你可以按任意顺序返回答案。\n\n \n\n**示例 1：**\n\n```\n输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n```\n\n**示例 2：**\n\n```\n输入：nums = [3,2,4], target = 6\n输出：[1,2]\n```\n\n**示例 3：**\n\n```\n输入：nums = [3,3], target = 6\n输出：[0,1]\n```\n\n \n\n**提示：**\n\n- `2 <= nums.length <= 104`\n- `-109 <= nums[i] <= 109`\n- `-109 <= target <= 109`\n- **只会存在一个有效答案**\n-109 <= nums[i] <= 109\n-109 <= target <= 109', '[\"简单\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        int a = Integer.parseInt(args[0]);\n        int b = Integer.parseInt(args[1]);\n        System.out.println((a + b));\n    }\n}\n```', 0, 0, '[{\"input\":\"1 2\",\"output\":\"3\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-02-06 16:14:45', '2024-02-18 13:51:51', 0);
INSERT INTO `question` VALUES (1759433770299662337, '移除元素', '给你一个数组 `nums` 和一个值 `val`，你需要 **[原地](https://baike.baidu.com/item/原地算法)** 移除所有数值等于 `val` 的元素，并返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **[原地 ](https://baike.baidu.com/item/原地算法)修改输入数组**。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n \n\n**说明:**\n\n为什么返回数值是整数，但输出的答案是数组呢?\n\n请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n\n你可以想象内部操作如下:\n\n```\n// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\nint len = removeElement(nums, val);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n```\n\n \n\n**示例 1：**\n\n```\n输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,3,0,4]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n```\n\n \n\n**提示：**\n\n- `0 <= nums.length <= 100`\n- `0 <= nums[i] <= 50`\n- `0 <= val <= 100`', '[\"简单\"]', '', 0, 0, '[{\"input\":\"\",\"output\":\"\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-02-19 12:24:34', '2024-02-19 12:24:53', 1);
INSERT INTO `question` VALUES (1763900857335427073, '验证回文串', '[125. 验证回文串](https://leetcode.cn/problems/valid-palindrome/)\n\n已解答\n\n简单\n\n\n\n相关标签\n\n相关企业\n\n\n\n如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个 **回文串** 。\n\n字母和数字都属于字母数字字符。\n\n给你一个字符串 `s`，如果它是 **回文串** ，返回 `true` ；否则，返回 `false` 。\n\n \n\n**示例 1：**\n\n```\n输入: s = \"A man, a plan, a canal: Panama\"\n输出：true\n解释：\"amanaplanacanalpanama\" 是回文串。\n```\n\n**示例 2：**\n\n```\n输入：s = \"race a car\"\n输出：false\n解释：\"raceacar\" 不是回文串。\n```\n\n**示例 3：**\n\n```\n输入：s = \" \"\n输出：true\n解释：在移除非字母数字字符之后，s 是一个空字符串 \"\" 。\n由于空字符串正着反着读都一样，所以是回文串。\n```\n\n \n\n**提示：**\n\n- `1 <= s.length <= 2 * 105`\n- `s` 仅由可打印的 ASCII 字符组成', '[\"简单\"]', '```java\nclass Solution {\n    public boolean isPalindrome(String s) {\n        StringBuffer sgood = new StringBuffer();\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetterOrDigit(ch)) {\n                sgood.append(Character.toLowerCase(ch));\n            }\n        }\n        StringBuffer sgood_rev = new StringBuffer(sgood).reverse();\n        return sgood.toString().equals(sgood_rev.toString());\n    }\n}\n```\n\n', 0, 0, '[{\"input\":\"raceacar\",\"output\":\"false\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-02 20:15:10', '2024-03-02 20:15:10', 0);
INSERT INTO `question` VALUES (1763902696797777922, '同构字符串', '[205. 同构字符串](https://leetcode.cn/problems/isomorphic-strings/)\n\n已解答\n\n简单\n\n\n\n相关标签\n\n相关企业\n\n\n\n给定两个字符串 `s` 和 `t` ，判断它们是否是同构的。\n\n如果 `s` 中的字符可以按某种映射关系替换得到 `t` ，那么这两个字符串是同构的。\n\n每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。\n\n \n\n**示例 1:**\n\n```\n输入：s = \"egg\", t = \"add\"\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：s = \"foo\", t = \"bar\"\n输出：false\n```\n\n**示例 3：**\n\n```\n输入：s = \"paper\", t = \"title\"\n输出：true\n```\n\n \n\n**提示：**\n\n\n\n- `1 <= s.length <= 5 * 104`\n- `t.length == s.length`\n- `s` 和 `t` 由任意有效的 ASCII 字符组成', '[\"简单\"]', '```\nclass Main {\n    public static void main(String[] args) {\n        String s1 = args[0];\n        String s2 = args[1];\n        System.out.println(isIsomorphic(s1,s2));\n    }\n    public static boolean isIsomorphic(String s, String t) {\n        Map<Character, Character> s2t = new HashMap<Character, Character>();\n        Map<Character, Character> t2s = new HashMap<Character, Character>();\n        int len = s.length();\n        for (int i = 0; i < len; ++i) {\n            char x = s.charAt(i), y = t.charAt(i);\n            if ((s2t.containsKey(x) && s2t.get(x) != y) || (t2s.containsKey(y) && t2s.get(y) != x)) {\n                return false;\n            }\n            s2t.put(x, y);\n            t2s.put(y, x);\n        }\n        return true;\n    }\n}\n```\n\n', 0, 0, '[{\"input\":\"egg add\",\"output\":\"true\"},{\"input\":\"foo bar\",\"output\":\"false\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-02 20:22:29', '2024-03-02 20:22:29', 0);
INSERT INTO `question` VALUES (1763908695994675202, '正则表达式匹配', '10. 正则表达式匹配\n已解答\n困难\n相关标签\n相关企业\n给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 \'.\' 和 \'*\' 的正则表达式匹配。\n\n\'.\' 匹配任意单个字符\n\'*\' 匹配零个或多个前面的那一个元素\n所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。\n\n \n示例 1：\n\n输入：s = \"aa\", p = \"a\"\n输出：false\n解释：\"a\" 无法匹配 \"aa\" 整个字符串。\n示例 2:\n\n输入：s = \"aa\", p = \"a*\"\n输出：true\n解释：因为 \'*\' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \'a\'。因此，字符串 \"aa\" 可被视为 \'a\' 重复了一次。\n示例 3：\n\n输入：s = \"ab\", p = \".*\"\n输出：true\n解释：\".*\" 表示可匹配零个或多个（\'*\'）任意字符（\'.\'）。\n \n\n提示：\n\n1 <= s.length <= 20\n1 <= p.length <= 20\ns 只包含从 a-z 的小写字母。\np 只包含从 a-z 的小写字母，以及字符 . 和 *。\n保证每次出现字符 * 时，前面都匹配到有效的字符', '[\"困难\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        String a = args[0];\n        String b = args[1];\n        System.out.println(isMatch(a,b));\n    }\n    public static boolean isMatch(String s, String p) {\n        int m = s.length();\n        int n = p.length();\n\n        boolean[][] f = new boolean[m + 1][n + 1];\n        f[0][0] = true;\n        for (int i = 0; i <= m; ++i) {\n            for (int j = 1; j <= n; ++j) {\n                if (p.charAt(j - 1) == \'*\') {\n                    f[i][j] = f[i][j - 2];\n                    if (matches(s, p, i, j - 1)) {\n                        f[i][j] = f[i][j] || f[i - 1][j];\n                    }\n                } else {\n                    if (matches(s, p, i, j)) {\n                        f[i][j] = f[i - 1][j - 1];\n                    }\n                }\n            }\n        }\n        return f[m][n];\n    }\n\n    public static boolean matches(String s, String p, int i, int j) {\n        if (i == 0) {\n            return false;\n        }\n        if (p.charAt(j - 1) == \'.\') {\n            return true;\n        }\n        return s.charAt(i - 1) == p.charAt(j - 1);\n    }\n}\n\n```\n\n', 0, 0, '[{\"input\":\"aa a\",\"output\":\"false\"},{\"input\":\"aa a*\",\"output\":\"true\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-02 20:46:19', '2024-03-02 20:57:12', 0);
INSERT INTO `question` VALUES (1763910675139932162, '有效的括号', '20. 有效的括号\n已解答\n简单\n相关标签\n相关企业\n提示\n给定一个只包括 \'(\'，\')\'，\'{\'，\'}\'，\'[\'，\']\' 的字符串 s ，判断字符串是否有效。\n\n有效字符串需满足：\n\n左括号必须用相同类型的右括号闭合。\n左括号必须以正确的顺序闭合。\n每个右括号都有一个对应的相同类型的左括号。\n \n\n示例 1：\n\n输入：s = \"()\"\n输出：true\n示例 2：\n\n输入：s = \"()[]{}\"\n输出：true\n示例 3：\n\n输入：s = \"(]\"\n输出：false\n \n\n提示：\n\n1 <= s.length <= 104\ns 仅由括号 \'()[]{}\' 组成', '[\"中等\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        String s = args[0];\n        System.out.println(isValid(s));\n    }\n    private static final Map<Character,Character> map = new HashMap<Character,Character>(){{\n        put(\'{\',\'}\'); put(\'[\',\']\'); put(\'(\',\')\'); put(\'?\',\'?\');\n    }};\n    public static boolean isValid(String s) {\n        if(s.length() > 0 && !map.containsKey(s.charAt(0))) return false;\n        LinkedList<Character> stack = new LinkedList<Character>() {{ add(\'?\'); }};\n        for(Character c : s.toCharArray()){\n            if(map.containsKey(c)) stack.addLast(c);\n            else if(map.get(stack.removeLast()) != c) return false;\n        }\n        return stack.size() == 1;\n    }\n}\n```\n\n', 0, 0, '[{\"input\":\"()\",\"output\":\"true\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-02 20:54:11', '2024-03-02 20:54:11', 0);
INSERT INTO `question` VALUES (1764269157336817666, '字符串相乘', '[43. 字符串相乘](https://leetcode.cn/problems/multiply-strings/)\n\n中等\n\n\n\n相关标签\n\n相关企业\n\n\n\n给定两个以字符串形式表示的非负整数 `num1` 和 `num2`，返回 `num1` 和 `num2` 的乘积，它们的乘积也表示为字符串形式。\n\n**注意：**不能使用任何内置的 BigInteger 库或直接将输入转换为整数。\n\n \n\n**示例 1:**\n\n```\n输入: num1 = \"2\", num2 = \"3\"\n输出: \"6\"\n```\n\n**示例 2:**\n\n```\n输入: num1 = \"123\", num2 = \"456\"\n输出: \"56088\"\n```\n\n \n\n**提示：**\n\n- `1 <= num1.length, num2.length <= 200`\n- `num1` 和 `num2` 只能由数字组成。\n- `num1` 和 `num2` 都不包含任何前导零，除了数字0本身。', '[\"中等\"]', '```\nclass Main {\n\n    public static void main(String[] args) {\n        String a = args[0];\n        String b = args[1];\n        System.out.println(multiply(a,b));\n    }\n\n    public static String multiply(String num1, String num2) {\n        if (num1.equals(\"0\") || num2.equals(\"0\")) {\n            return \"0\";\n        }\n        String ans = \"0\";\n        int m = num1.length(), n = num2.length();\n        for (int i = n - 1; i >= 0; i--) {\n            StringBuffer curr = new StringBuffer();\n            int add = 0;\n            for (int j = n - 1; j > i; j--) {\n                curr.append(0);\n            }\n            int y = num2.charAt(i) - \'0\';\n            for (int j = m - 1; j >= 0; j--) {\n                int x = num1.charAt(j) - \'0\';\n                int product = x * y + add;\n                curr.append(product % 10);\n                add = product / 10;\n            }\n            if (add != 0) {\n                curr.append(add % 10);\n            }\n            ans = addStrings(ans, curr.reverse().toString());\n        }\n        return ans;\n    }\n\n    public static String addStrings(String num1, String num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        StringBuffer ans = new StringBuffer();\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1.charAt(i) - \'0\' : 0;\n            int y = j >= 0 ? num2.charAt(j) - \'0\' : 0;\n            int result = x + y + add;\n            ans.append(result % 10);\n            add = result / 10;\n            i--;\n            j--;\n        }\n        ans.reverse();\n        return ans.toString();\n    }\n}\n```\n\n', 0, 0, '[{\"input\":\"2 3\",\"output\":\"6\"},{\"input\":\"123 456\",\"output\":\"56088\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-03 20:38:40', '2024-03-03 20:39:07', 0);
INSERT INTO `question` VALUES (1764269837963304961, 'Pow(x, n)', '\n代码\n测试用例\n测试结果\n测试结果\n50. Pow(x, n)\n中等\n相关标签\n相关企业\n实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，xn ）。\n\n \n\n示例 1：\n\n输入：x = 2.00000, n = 10\n输出：1024.00000\n示例 2：\n\n输入：x = 2.10000, n = 3\n输出：9.26100\n示例 3：\n\n输入：x = 2.00000, n = -2\n输出：0.25000\n解释：2-2 = 1/22 = 1/4 = 0.25\n \n\n提示：\n\n-100.0 < x < 100.0\n-231 <= n <= 231-1\nn 是一个整数\n要么 x 不为零，要么 n > 0 。\n-104 <= xn <= 104', '[\"中等\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        Double a = Double.valueOf(args[0]);\n        Integer b = Integer.valueOf(args[1]);\n\n        System.out.println(myPow(a,b));\n    }\n    public static double myPow(double x, int n) {\n        long N = n;\n        return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n\n    public static double quickMul(double x, long N) {\n        if (N == 0) {\n            return 1.0;\n        }\n        double y = quickMul(x, N / 2);\n        return N % 2 == 0 ? y * y : y * y * x;\n    }\n}\n```\n\n', 0, 0, '[{\"input\":\"2.00000 10\",\"output\":\"1024.00000\"},{\"input\":\"2.10000 3\",\"output\":\"9.26100\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-03 20:41:22', '2024-03-03 20:43:19', 0);
INSERT INTO `question` VALUES (1764271264945217537, 'N 皇后 II', '52. N 皇后 II\n困难\n相关标签\n相关企业\nn 皇后问题 研究的是如何将 n 个皇后放置在 n × n 的棋盘上，并且使皇后彼此之间不能相互攻击。\n\n给你一个整数 n ，返回 n 皇后问题 不同的解决方案的数量。\n\n \n\n示例 1：\n\n\n输入：n = 4\n输出：2\n解释：如上图所示，4 皇后问题存在两个不同的解法。\n示例 2：\n\n输入：n = 1\n输出：1\n ', '[\"困难\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(totalNQueens(a));\n    }\n    public static int totalNQueens(int n) {\n        Set<Integer> columns = new HashSet<Integer>();\n        Set<Integer> diagonals1 = new HashSet<Integer>();\n        Set<Integer> diagonals2 = new HashSet<Integer>();\n        return backtrack(n, 0, columns, diagonals1, diagonals2);\n    }\n\n    public static int backtrack(int n, int row, Set<Integer> columns, Set<Integer> diagonals1, Set<Integer> diagonals2) {\n        if (row == n) {\n            return 1;\n        } else {\n            int count = 0;\n            for (int i = 0; i < n; i++) {\n                if (columns.contains(i)) {\n                    continue;\n                }\n                int diagonal1 = row - i;\n                if (diagonals1.contains(diagonal1)) {\n                    continue;\n                }\n                int diagonal2 = row + i;\n                if (diagonals2.contains(diagonal2)) {\n                    continue;\n                }\n                columns.add(i);\n                diagonals1.add(diagonal1);\n                diagonals2.add(diagonal2);\n                count += backtrack(n, row + 1, columns, diagonals1, diagonals2);\n                columns.remove(i);\n                diagonals1.remove(diagonal1);\n                diagonals2.remove(diagonal2);\n            }\n            return count;\n        }\n    }\n\n}\n```\n\n', 0, 0, '[{\"input\":\"4\",\"output\":\"2\"},{\"input\":\"1\",\"output\":\"1\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-03 20:47:02', '2024-03-03 20:48:11', 0);
INSERT INTO `question` VALUES (1764272198899277825, '格雷编码', '89. 格雷编码\n中等\n相关标签\n相关企业\nn 位格雷码序列 是一个由 2n 个整数组成的序列，其中：\n每个整数都在范围 [0, 2n - 1] 内（含 0 和 2n - 1）\n第一个整数是 0\n一个整数在序列中出现 不超过一次\n每对 相邻 整数的二进制表示 恰好一位不同 ，且\n第一个 和 最后一个 整数的二进制表示 恰好一位不同\n给你一个整数 n ，返回任一有效的 n 位格雷码序列 。\n\n \n\n示例 1：\n\n输入：n = 2\n输出：[0,1,3,2]\n解释：\n[0,1,3,2] 的二进制表示是 [00,01,11,10] 。\n- 00 和 01 有一位不同\n- 01 和 11 有一位不同\n- 11 和 10 有一位不同\n- 10 和 00 有一位不同\n[0,2,3,1] 也是一个有效的格雷码序列，其二进制表示是 [00,10,11,01] 。\n- 00 和 10 有一位不同\n- 10 和 11 有一位不同\n- 11 和 01 有一位不同\n- 01 和 00 有一位不同\n示例 2：\n\n输入：n = 1\n输出：[0,1]\n ', '[\"中等\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(grayCode(a));\n    }\n    public static List<Integer> grayCode(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.size();\n            for (int j = m - 1; j >= 0; j--) {\n                ret.add(ret.get(j) | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n}\n```', 0, 0, '[{\"input\":\"2\",\"output\":\"[0,1,3,2]\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-03 20:50:45', '2024-03-03 21:30:29', 0);
INSERT INTO `question` VALUES (1764272990179893249, '交错字符串', '[97. 交错字符串](https://leetcode.cn/problems/interleaving-string/)\n\n中等\n\n\n\n相关标签\n\n相关企业\n\n\n\n给定三个字符串 `s1`、`s2`、`s3`，请你帮忙验证 `s3` 是否是由 `s1` 和 `s2` **交错** 组成的。\n\n两个字符串 `s` 和 `t` **交错** 的定义与过程如下，其中每个字符串都会被分割成若干 **非空** 子字符串：\n\n- `s = s1 + s2 + ... + sn`\n- `t = t1 + t2 + ... + tm`\n- `|n - m| <= 1`\n- **交错** 是 `s1 + t1 + s2 + t2 + s3 + t3 + ...` 或者 `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\n**注意：**`a + b` 意味着字符串 `a` 和 `b` 连接。\n\n \n\n**示例 1：**\n\n![img](https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg)\n\n```\n输入：s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n输出：true\n```\n\n**示例 2：**\n\n```\n输入：s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n输出：false\n```\n\n**示例 3：**\n\n```\n输入：s1 = \"\", s2 = \"\", s3 = \"\"\n输出：true\n```\n\n \n\n**提示：**\n\n- `0 <= s1.length, s2.length <= 100`\n- `0 <= s3.length <= 200`\n- `s1`、`s2`、和 `s3` 都由小写英文字母组成', '[\"中等\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        String a = args[0];\n        String b = args[1];\n        String c = args[2];\n        System.out.println(isInterleave(a,b,c));\n    }\n    public static boolean isInterleave(String s1, String s2, String s3) {\n        int n = s1.length(), m = s2.length(), t = s3.length();\n\n        if (n + m != t) {\n            return false;\n        }\n\n        boolean[][] f = new boolean[n + 1][m + 1];\n\n        f[0][0] = true;\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= m; ++j) {\n                int p = i + j - 1;\n                if (i > 0) {\n                    f[i][j] = f[i][j] || (f[i - 1][j] && s1.charAt(i - 1) == s3.charAt(p));\n                }\n                if (j > 0) {\n                    f[i][j] = f[i][j] || (f[i][j - 1] && s2.charAt(j - 1) == s3.charAt(p));\n                }\n            }\n        }\n\n        return f[n][m];\n    }\n}\n```\n\n', 0, 0, '[{\"input\":\"aabcc dbbca aadbbcbcac\",\"output\":\"true\"},{\"input\":\"aabcc dbbca aadbbbaccc\",\"output\":\"false\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-03 20:53:54', '2024-03-03 20:53:54', 0);
INSERT INTO `question` VALUES (1764282558662389761, '位1的个数', '191. 位1的个数\n简单\n相关标签\n相关企业\n编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 \'1\' 的个数（也被称为汉明重量）。\n\n \n\n提示：\n\n请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。\n在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 3 中，输入表示有符号整数 -3。\n \n\n示例 1：\n\n输入：n = 00000000000000000000000000001011\n输出：3\n解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 \'1\'。\n示例 2：\n\n输入：n = 00000000000000000000000010000000\n输出：1\n解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 \'1\'。\n示例 3：\n\n输入：n = 11111111111111111111111111111101\n输出：31\n解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 \'1\'。\n \n\n提示：\n\n输入必须是长度为 32 的 二进制串 。\n \n\n进阶：\n\n如果多次调用这个函数，你将如何优化你的算法？', '[\"简单\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(hammingWeight(a));\n    }\n    public static int hammingWeight(int n) {\n        int ret = 0;\n        for (int i = 0; i < 32; i++) {\n            if ((n & (1 << i)) != 0) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n\n}\n```', 0, 0, '[{\"input\":\"00000000000000000000000000001011\",\"output\":\"3\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-03 21:31:55', '2024-03-03 21:39:08', 1);
INSERT INTO `question` VALUES (1764284847997399041, '计数质数', '204. 计数质数\n中等\n相关标签\n相关企业\n提示\n给定整数 n ，返回 所有小于非负整数 n 的质数的数量 。\n\n \n\n示例 1：\n\n输入：n = 10\n输出：4\n解释：小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。\n示例 2：\n\n输入：n = 0\n输出：0\n示例 3：\n\n输入：n = 1\n输出：0\n \n\n提示：\n\n0 <= n <= 5 * 106', '[\"中等\"]', '```\npublic class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(countPrimes(a));\n    }\n    public static int countPrimes(int n) {\n        int ans = 0;\n        for (int i = 2; i < n; ++i) {\n            ans += isPrime(i) ? 1 : 0;\n        }\n        return ans;\n    }\n\n    public static boolean isPrime(int x) {\n        for (int i = 2; i * i <= x; ++i) {\n            if (x % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n```', 0, 0, '[{\"input\":\"10\",\"output\":\"4\"},{\"input\":\"0\",\"output\":\"0\"},{\"input\":\"1\",\"output\":\"0\"}]', '{\"timeLimit\":1000,\"memoryLimit\":1000,\"stackLimit\":1000}', 0, 0, 1754516326912438274, '2024-03-03 21:41:01', '2024-03-03 21:41:51', 0);

-- ----------------------------
-- Table structure for question_submit
-- ----------------------------
DROP TABLE IF EXISTS `question_submit`;
CREATE TABLE `question_submit`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `language` varchar(128) CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '编程语言',
  `code` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NOT NULL COMMENT '用户代码',
  `judgeInfo` text CHARACTER SET utf8mb3 COLLATE utf8mb3_general_ci NULL COMMENT '判题信息（json 对象）',
  `status` int NOT NULL DEFAULT 0 COMMENT '判题状态（0 - 待判题、1 - 判题中、2 - 成功、3 - 失败）',
  `questionId` bigint NOT NULL COMMENT '题目 id',
  `userId` bigint NOT NULL COMMENT '创建用户 id',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_questionId`(`questionId` ASC) USING BTREE,
  INDEX `idx_userId`(`userId` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1764592329072390146 CHARACTER SET = utf8mb3 COLLATE = utf8mb3_general_ci COMMENT = '题目提交' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of question_submit
-- ----------------------------
INSERT INTO `question_submit` VALUES (1754781691278274562, 'java', '111', '{\"message\":\"Wrong Answer\",\"memory\":100,\"time\":100}', 2, 1754780655998218241, 1754516326912438274, '2024-02-06 16:18:52', '2024-02-06 16:18:52', 0);
INSERT INTO `question_submit` VALUES (1755869702695002114, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-09 16:22:14', '2024-02-09 16:22:14', 0);
INSERT INTO `question_submit` VALUES (1755869951605972994, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-09 16:23:13', '2024-02-09 16:23:13', 0);
INSERT INTO `question_submit` VALUES (1755870473968787457, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-09 16:25:18', '2024-02-09 16:25:18', 0);
INSERT INTO `question_submit` VALUES (1755871510637158402, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-09 16:29:25', '2024-02-09 16:29:27', 0);
INSERT INTO `question_submit` VALUES (1755871954222575618, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Accepted\",\"time\":1312}', 2, 1754780655998218241, 1754516326912438274, '2024-02-09 16:31:11', '2024-02-09 16:31:42', 0);
INSERT INTO `question_submit` VALUES (1755871966591578114, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Accepted\",\"time\":91}', 2, 1754780655998218241, 1754516326912438274, '2024-02-09 16:31:14', '2024-02-09 16:31:42', 0);
INSERT INTO `question_submit` VALUES (1757363282207436801, 'java', 'int main', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-13 19:17:11', '2024-02-13 19:17:11', 0);
INSERT INTO `question_submit` VALUES (1757397730571431938, 'java', 'int main', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-13 21:34:04', '2024-02-13 21:34:04', 0);
INSERT INTO `question_submit` VALUES (1759053344884183042, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:12:53', '2024-02-18 11:12:54', 0);
INSERT INTO `question_submit` VALUES (1759054163541020673, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:16:08', '2024-02-18 11:16:13', 0);
INSERT INTO `question_submit` VALUES (1759054625304530946, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:17:58', '2024-02-18 11:18:04', 0);
INSERT INTO `question_submit` VALUES (1759054626344718337, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:17:59', '2024-02-18 11:18:16', 0);
INSERT INTO `question_submit` VALUES (1759055812649078786, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:22:42', '2024-02-18 11:22:53', 0);
INSERT INTO `question_submit` VALUES (1759056441337499650, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:25:11', '2024-02-18 11:25:14', 0);
INSERT INTO `question_submit` VALUES (1759057171205115905, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:28:05', '2024-02-18 11:29:14', 0);
INSERT INTO `question_submit` VALUES (1759057866490695682, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:30:51', '2024-02-18 11:30:54', 0);
INSERT INTO `question_submit` VALUES (1759057993666187266, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:31:22', '2024-02-18 11:31:24', 0);
INSERT INTO `question_submit` VALUES (1759058128429174785, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:31:54', '2024-02-18 11:31:55', 0);
INSERT INTO `question_submit` VALUES (1759060095197040641, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:39:43', '2024-02-18 11:39:46', 0);
INSERT INTO `question_submit` VALUES (1759060531148804097, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:41:27', '2024-02-18 11:41:29', 0);
INSERT INTO `question_submit` VALUES (1759061781604990978, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:46:25', '2024-02-18 11:46:27', 0);
INSERT INTO `question_submit` VALUES (1759062231288905729, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:48:12', '2024-02-18 11:48:14', 0);
INSERT INTO `question_submit` VALUES (1759063514825621506, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Wrong Answer\"}', 2, 1754780655998218241, 1754516326912438274, '2024-02-18 11:53:18', '2024-02-18 11:53:22', 0);
INSERT INTO `question_submit` VALUES (1759064161797013505, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Wrong Answer\"}', 2, 1754780655998218241, 1754516326912438274, '2024-02-18 11:55:52', '2024-02-18 11:56:03', 0);
INSERT INTO `question_submit` VALUES (1759064434535825409, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 11:56:57', '2024-02-18 11:57:01', 0);
INSERT INTO `question_submit` VALUES (1759067130995146754, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 12:07:40', '2024-02-18 12:07:43', 0);
INSERT INTO `question_submit` VALUES (1759067230257545217, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 12:08:04', '2024-02-18 12:08:06', 0);
INSERT INTO `question_submit` VALUES (1759067681145225217, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{}', 1, 1754780655998218241, 1754516326912438274, '2024-02-18 12:09:51', '2024-02-18 12:09:54', 0);
INSERT INTO `question_submit` VALUES (1759067847323549697, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1754780655998218241, 1754516326912438274, '2024-02-18 12:10:31', '2024-02-18 12:10:36', 0);
INSERT INTO `question_submit` VALUES (1759070567547850754, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1754780655998218241, 1754516326912438274, '2024-02-18 12:21:19', '2024-02-18 12:21:28', 0);
INSERT INTO `question_submit` VALUES (1759070655955390465, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1754780655998218241, 1754516326912438274, '2024-02-18 12:21:41', '2024-02-18 12:21:41', 0);
INSERT INTO `question_submit` VALUES (1759082722712145922, 'java', '', '{\"message\":\"Wrong Answer\"}', 2, 1754780655998218241, 1754516326912438274, '2024-02-18 13:09:37', '2024-02-18 13:09:38', 0);
INSERT INTO `question_submit` VALUES (1763894663438938113, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        int a = Integer.parseInt(args[0]);\r\n        int b = Integer.parseInt(args[1]);\r\n        System.out.println((a + b));\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1754780655998218241, 1754516326912438274, '2024-03-02 19:50:34', '2024-03-02 19:50:36', 0);
INSERT INTO `question_submit` VALUES (1763901165348335617, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        String s = args[0];\r\n\r\n        System.out.println(isPalindrome(s));\r\n    }\r\n\r\n    public static boolean isPalindrome(String s) {\r\n        StringBuffer sgood = new StringBuffer();\r\n        int length = s.length();\r\n        for (int i = 0; i < length; i++) {\r\n            char ch = s.charAt(i);\r\n            if (Character.isLetterOrDigit(ch)) {\r\n                sgood.append(Character.toLowerCase(ch));\r\n            }\r\n        }\r\n        StringBuffer sgood_rev = new StringBuffer(sgood).reverse();\r\n        return sgood.toString().equals(sgood_rev.toString());\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1763900857335427073, 1754516326912438274, '2024-03-02 20:16:24', '2024-03-02 20:16:24', 0);
INSERT INTO `question_submit` VALUES (1763902741551001601, 'java', 'class Main {\r\n    public static void main(String[] args) {\r\n        String s1 = args[0];\r\n        String s2 = args[1];\r\n        System.out.println(isIsomorphic(s1,s2));\r\n    }\r\n    public static boolean isIsomorphic(String s, String t) {\r\n        Map<Character, Character> s2t = new HashMap<Character, Character>();\r\n        Map<Character, Character> t2s = new HashMap<Character, Character>();\r\n        int len = s.length();\r\n        for (int i = 0; i < len; ++i) {\r\n            char x = s.charAt(i), y = t.charAt(i);\r\n            if ((s2t.containsKey(x) && s2t.get(x) != y) || (t2s.containsKey(y) && t2s.get(y) != x)) {\r\n                return false;\r\n            }\r\n            s2t.put(x, y);\r\n            t2s.put(y, x);\r\n        }\r\n        return true;\r\n    }\r\n}', '{}', 1, 1763902696797777922, 1754516326912438274, '2024-03-02 20:22:39', '2024-03-02 20:22:40', 0);
INSERT INTO `question_submit` VALUES (1763906631382085634, 'java', 'class Main {\r\n    public static void main(String[] args) {\r\n        String s1 = args[0];\r\n        String s2 = args[1];\r\n        System.out.println(isIsomorphic(s1,s2));\r\n    }\r\n    public static boolean isIsomorphic(String s, String t) {\r\n        Map<Character, Character> s2t = new HashMap<Character, Character>();\r\n        Map<Character, Character> t2s = new HashMap<Character, Character>();\r\n        int len = s.length();\r\n        for (int i = 0; i < len; ++i) {\r\n            char x = s.charAt(i), y = t.charAt(i);\r\n            if ((s2t.containsKey(x) && s2t.get(x) != y) || (t2s.containsKey(y) && t2s.get(y) != x)) {\r\n                return false;\r\n            }\r\n            s2t.put(x, y);\r\n            t2s.put(y, x);\r\n        }\r\n        return true;\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1763902696797777922, 1754516326912438274, '2024-03-02 20:38:07', '2024-03-02 20:38:08', 0);
INSERT INTO `question_submit` VALUES (1763906764001783809, 'java', 'class Main {\r\n    public static void main(String[] args) {\r\n        String s1 = args[0];\r\n        String s2 = args[1];\r\n        System.out.println(isIsomorphic(s1,s2));\r\n    }\r\n    public static boolean isIsomorphic(String s, String t) {\r\n        aaa\r\n        Map<Character, Character> s2t = new HashMap<Character, Character>();\r\n        Map<Character, Character> t2s = new HashMap<Character, Character>();\r\n        int len = s.length();\r\n        for (int i = 0; i < len; ++i) {\r\n            char x = s.charAt(i), y = t.charAt(i);\r\n            if ((s2t.containsKey(x) && s2t.get(x) != y) || (t2s.containsKey(y) && t2s.get(y) != x)) {\r\n                return false;\r\n            }\r\n            s2t.put(x, y);\r\n            t2s.put(y, x);\r\n        }\r\n        return true;\r\n    }\r\n}', '{}', 1, 1763902696797777922, 1754516326912438274, '2024-03-02 20:38:39', '2024-03-02 20:38:39', 0);
INSERT INTO `question_submit` VALUES (1763908760603734017, 'java', 'class Main {\r\n\r\n    public static void main(String[] args) {\r\n        String a = args[0];\r\n        String b = args[1];\r\n        System.out.println(isMatch(a+b));\r\n    }\r\n    public static boolean isMatch(String s, String p) {\r\n        int m = s.length();\r\n        int n = p.length();\r\n\r\n        boolean[][] f = new boolean[m + 1][n + 1];\r\n        f[0][0] = true;\r\n        for (int i = 0; i <= m; ++i) {\r\n            for (int j = 1; j <= n; ++j) {\r\n                if (p.charAt(j - 1) == \'*\') {\r\n                    f[i][j] = f[i][j - 2];\r\n                    if (matches(s, p, i, j - 1)) {\r\n                        f[i][j] = f[i][j] || f[i - 1][j];\r\n                    }\r\n                } else {\r\n                    if (matches(s, p, i, j)) {\r\n                        f[i][j] = f[i - 1][j - 1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return f[m][n];\r\n    }\r\n\r\n    public static boolean matches(String s, String p, int i, int j) {\r\n        if (i == 0) {\r\n            return false;\r\n        }\r\n        if (p.charAt(j - 1) == \'.\') {\r\n            return true;\r\n        }\r\n        return s.charAt(i - 1) == p.charAt(j - 1);\r\n    }\r\n}', '{}', 1, 1763908695994675202, 1754516326912438274, '2024-03-02 20:46:35', '2024-03-02 20:46:35', 0);
INSERT INTO `question_submit` VALUES (1763910715199729666, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        String s = args[0];\r\n        System.out.println(isValid(s));\r\n    }\r\n    private static final Map<Character,Character> map = new HashMap<Character,Character>(){{\r\n        put(\'{\',\'}\'); put(\'[\',\']\'); put(\'(\',\')\'); put(\'?\',\'?\');\r\n    }};\r\n    public static boolean isValid(String s) {\r\n        if(s.length() > 0 && !map.containsKey(s.charAt(0))) return false;\r\n        LinkedList<Character> stack = new LinkedList<Character>() {{ add(\'?\'); }};\r\n        for(Character c : s.toCharArray()){\r\n            if(map.containsKey(c)) stack.addLast(c);\r\n            else if(map.get(stack.removeLast()) != c) return false;\r\n        }\r\n        return stack.size() == 1;\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1763910675139932162, 1754516326912438274, '2024-03-02 20:54:21', '2024-03-02 20:54:21', 0);
INSERT INTO `question_submit` VALUES (1763911490797842434, 'java', 'public class Main {\r\n    public static void main(String[] args) {\r\n        String a = args[0];\r\n        String b = args[1];\r\n        System.out.println(isMatch(a,b));\r\n    }\r\n    public static boolean isMatch(String s, String p) {\r\n        int m = s.length();\r\n        int n = p.length();\r\n\r\n        boolean[][] f = new boolean[m + 1][n + 1];\r\n        f[0][0] = true;\r\n        for (int i = 0; i <= m; ++i) {\r\n            for (int j = 1; j <= n; ++j) {\r\n                if (p.charAt(j - 1) == \'*\') {\r\n                    f[i][j] = f[i][j - 2];\r\n                    if (matches(s, p, i, j - 1)) {\r\n                        f[i][j] = f[i][j] || f[i - 1][j];\r\n                    }\r\n                } else {\r\n                    if (matches(s, p, i, j)) {\r\n                        f[i][j] = f[i - 1][j - 1];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return f[m][n];\r\n    }\r\n\r\n    public static boolean matches(String s, String p, int i, int j) {\r\n        if (i == 0) {\r\n            return false;\r\n        }\r\n        if (p.charAt(j - 1) == \'.\') {\r\n            return true;\r\n        }\r\n        return s.charAt(i - 1) == p.charAt(j - 1);\r\n    }\r\n}', '{\"message\":\"Accepted\"}', 2, 1763908695994675202, 1754516326912438274, '2024-03-02 20:57:25', '2024-03-02 20:57:26', 0);
INSERT INTO `question_submit` VALUES (1763915616919236610, 'java', '', '{\"message\":\"Wrong Answer\"}', 2, 1754780655998218241, 1754516326912438274, '2024-03-02 21:13:49', '2024-03-02 21:13:50', 0);
INSERT INTO `question_submit` VALUES (1764269326027530242, 'java', 'class Main {\n\n    public static void main(String[] args) {\n        String a = args[0];\n        String b = args[1];\n        System.out.println(multiply(a,b));\n    }\n\n    public static String multiply(String num1, String num2) {\n        if (num1.equals(\"0\") || num2.equals(\"0\")) {\n            return \"0\";\n        }\n        String ans = \"0\";\n        int m = num1.length(), n = num2.length();\n        for (int i = n - 1; i >= 0; i--) {\n            StringBuffer curr = new StringBuffer();\n            int add = 0;\n            for (int j = n - 1; j > i; j--) {\n                curr.append(0);\n            }\n            int y = num2.charAt(i) - \'0\';\n            for (int j = m - 1; j >= 0; j--) {\n                int x = num1.charAt(j) - \'0\';\n                int product = x * y + add;\n                curr.append(product % 10);\n                add = product / 10;\n            }\n            if (add != 0) {\n                curr.append(add % 10);\n            }\n            ans = addStrings(ans, curr.reverse().toString());\n        }\n        return ans;\n    }\n\n    public static String addStrings(String num1, String num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        StringBuffer ans = new StringBuffer();\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1.charAt(i) - \'0\' : 0;\n            int y = j >= 0 ? num2.charAt(j) - \'0\' : 0;\n            int result = x + y + add;\n            ans.append(result % 10);\n            add = result / 10;\n            i--;\n            j--;\n        }\n        ans.reverse();\n        return ans.toString();\n    }\n}', '{\"message\":\"Accepted\"}', 2, 1764269157336817666, 1754516326912438274, '2024-03-03 20:39:20', '2024-03-03 20:39:21', 0);
INSERT INTO `question_submit` VALUES (1764270372770619393, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Double a = Double.valueOf(args[0]);\n        Integer b = Integer.valueOf(args[1]);\n\n        System.out.println(myPow(a,b));\n    }\n    public static double myPow(double x, int n) {\n        long N = n;\n        return N >= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n\n    public static double quickMul(double x, long N) {\n        if (N == 0) {\n            return 1.0;\n        }\n        double y = quickMul(x, N / 2);\n        return N % 2 == 0 ? y * y : y * y * x;\n    }\n}', '{\"message\":\"Wrong Answer\"}', 2, 1764269837963304961, 1754516326912438274, '2024-03-03 20:43:30', '2024-03-03 20:43:30', 0);
INSERT INTO `question_submit` VALUES (1764270481277263873, 'java', 'class Main {\n\n    public static void main(String[] args) {\n        String a = args[0];\n        String b = args[1];\n        System.out.println(multiply(a,b));\n    }\n\n    public static String multiply(String num1, String num2) {\n        if (num1.equals(\"0\") || num2.equals(\"0\")) {\n            return \"0\";\n        }\n        String ans = \"0\";\n        int m = num1.length(), n = num2.length();\n        for (int i = n - 1; i >= 0; i--) {\n            StringBuffer curr = new StringBuffer();\n            int add = 0;\n            for (int j = n - 1; j > i; j--) {\n                curr.append(0);\n            }\n            int y = num2.charAt(i) - \'0\';\n            for (int j = m - 1; j >= 0; j--) {\n                int x = num1.charAt(j) - \'0\';\n                int product = x * y + add;\n                curr.append(product % 10);\n                add = product / 10;\n            }\n            if (add != 0) {\n                curr.append(add % 10);\n            }\n            ans = addStrings(ans, curr.reverse().toString());\n        }\n        return ans;\n    }\n\n    public static String addStrings(String num1, String num2) {\n        int i = num1.length() - 1, j = num2.length() - 1, add = 0;\n        StringBuffer ans = new StringBuffer();\n        while (i >= 0 || j >= 0 || add != 0) {\n            int x = i >= 0 ? num1.charAt(i) - \'0\' : 0;\n            int y = j >= 0 ? num2.charAt(j) - \'0\' : 0;\n            int result = x + y + add;\n            ans.append(result % 10);\n            add = result / 10;\n            i--;\n            j--;\n        }\n        ans.reverse();\n        return ans.toString();\n    }\n}', '{\"message\":\"Accepted\"}', 2, 1764269157336817666, 1754516326912438274, '2024-03-03 20:43:55', '2024-03-03 20:43:56', 0);
INSERT INTO `question_submit` VALUES (1764270531717963778, 'java', 'public class Main {\n    public static void main(String[] args) {\n        String s = args[0];\n        System.out.println(isValid(s));\n    }\n    private static final Map<Character,Character> map = new HashMap<Character,Character>(){{\n        put(\'{\',\'}\'); put(\'[\',\']\'); put(\'(\',\')\'); put(\'?\',\'?\');\n    }};\n    public static boolean isValid(String s) {\n        if(s.length() > 0 && !map.containsKey(s.charAt(0))) return false;\n        LinkedList<Character> stack = new LinkedList<Character>() {{ add(\'?\'); }};\n        for(Character c : s.toCharArray()){\n            if(map.containsKey(c)) stack.addLast(c);\n            else if(map.get(stack.removeLast()) != c) return false;\n        }\n        return stack.size() == 1;\n    }\n}', '{\"message\":\"Accepted\"}', 2, 1763910675139932162, 1754516326912438274, '2024-03-03 20:44:07', '2024-03-03 20:44:08', 0);
INSERT INTO `question_submit` VALUES (1764271606395117569, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(totalNQueens(a));\n    }\n    public static int totalNQueens(int n) {\n        Set<Integer> columns = new HashSet<Integer>();\n        Set<Integer> diagonals1 = new HashSet<Integer>();\n        Set<Integer> diagonals2 = new HashSet<Integer>();\n        return backtrack(n, 0, columns, diagonals1, diagonals2);\n    }\n\n    public static int backtrack(int n, int row, Set<Integer> columns, Set<Integer> diagonals1, Set<Integer> diagonals2) {\n        if (row == n) {\n            return 1;\n        } else {\n            int count = 0;\n            for (int i = 0; i < n; i++) {\n                if (columns.contains(i)) {\n                    continue;\n                }\n                int diagonal1 = row - i;\n                if (diagonals1.contains(diagonal1)) {\n                    continue;\n                }\n                int diagonal2 = row + i;\n                if (diagonals2.contains(diagonal2)) {\n                    continue;\n                }\n                columns.add(i);\n                diagonals1.add(diagonal1);\n                diagonals2.add(diagonal2);\n                count += backtrack(n, row + 1, columns, diagonals1, diagonals2);\n                columns.remove(i);\n                diagonals1.remove(diagonal1);\n                diagonals2.remove(diagonal2);\n            }\n            return count;\n        }\n    }\n\n}', '{\"message\":\"Accepted\"}', 2, 1764271264945217537, 1754516326912438274, '2024-03-03 20:48:24', '2024-03-03 20:48:24', 0);
INSERT INTO `question_submit` VALUES (1764272242914304001, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(totalNQueens(a));\n    }\n    public static int totalNQueens(int n) {\n        Set<Integer> columns = new HashSet<Integer>();\n        Set<Integer> diagonals1 = new HashSet<Integer>();\n        Set<Integer> diagonals2 = new HashSet<Integer>();\n        return backtrack(n, 0, columns, diagonals1, diagonals2);\n    }\n\n    public static int backtrack(int n, int row, Set<Integer> columns, Set<Integer> diagonals1, Set<Integer> diagonals2) {\n        if (row == n) {\n            return 1;\n        } else {\n            int count = 0;\n            for (int i = 0; i < n; i++) {\n                if (columns.contains(i)) {\n                    continue;\n                }\n                int diagonal1 = row - i;\n                if (diagonals1.contains(diagonal1)) {\n                    continue;\n                }\n                int diagonal2 = row + i;\n                if (diagonals2.contains(diagonal2)) {\n                    continue;\n                }\n                columns.add(i);\n                diagonals1.add(diagonal1);\n                diagonals2.add(diagonal2);\n                count += backtrack(n, row + 1, columns, diagonals1, diagonals2);\n                columns.remove(i);\n                diagonals1.remove(diagonal1);\n                diagonals2.remove(diagonal2);\n            }\n            return count;\n        }\n    }\n\n}', '{\"message\":\"Accepted\"}', 2, 1764271264945217537, 1754516326912438274, '2024-03-03 20:50:55', '2024-03-03 20:50:56', 0);
INSERT INTO `question_submit` VALUES (1764273056869326849, 'java', 'public class Main {\n    public static void main(String[] args) {\n        String a = args[0];\n        String b = args[1];\n        String c = args[2];\n        System.out.println(isInterleave(a,b,c));\n    }\n    public static boolean isInterleave(String s1, String s2, String s3) {\n        int n = s1.length(), m = s2.length(), t = s3.length();\n\n        if (n + m != t) {\n            return false;\n        }\n\n        boolean[][] f = new boolean[n + 1][m + 1];\n\n        f[0][0] = true;\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j <= m; ++j) {\n                int p = i + j - 1;\n                if (i > 0) {\n                    f[i][j] = f[i][j] || (f[i - 1][j] && s1.charAt(i - 1) == s3.charAt(p));\n                }\n                if (j > 0) {\n                    f[i][j] = f[i][j] || (f[i][j - 1] && s2.charAt(j - 1) == s3.charAt(p));\n                }\n            }\n        }\n\n        return f[n][m];\n    }\n}', '{\"message\":\"Accepted\"}', 2, 1764272990179893249, 1754516326912438274, '2024-03-03 20:54:10', '2024-03-03 20:54:10', 0);
INSERT INTO `question_submit` VALUES (1764280613126090753, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(grayCode(a));\n    }\n    public List<Integer> grayCode(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.size();\n            for (int j = m - 1; j >= 0; j--) {\n                ret.add(ret.get(j) | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n}', '{\"message\":\"Compile Error\"}', 2, 1764272198899277825, 1754516326912438274, '2024-03-03 21:24:11', '2024-03-03 21:24:12', 0);
INSERT INTO `question_submit` VALUES (1764280852968976385, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(grayCode(a));\n    }\n    public static List<Integer> grayCode(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.size();\n            for (int j = m - 1; j >= 0; j--) {\n                ret.add(ret.get(j) | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n}', '{\"message\":\"Wrong Answer\"}', 2, 1764272198899277825, 1754516326912438274, '2024-03-03 21:25:08', '2024-03-03 21:25:09', 0);
INSERT INTO `question_submit` VALUES (1764281544089612289, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(grayCode(a));\n    }\n    public static List<Integer> grayCode(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.size();\n            for (int j = m - 1; j >= 0; j--) {\n                ret.add(ret.get(j) | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n}', '{\"message\":\"Wrong Answer\"}', 2, 1764272198899277825, 1754516326912438274, '2024-03-03 21:27:53', '2024-03-03 21:27:54', 0);
INSERT INTO `question_submit` VALUES (1764282241346514945, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(grayCode(a));\n    }\n    public static List<Integer> grayCode(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        ret.add(0);\n        for (int i = 1; i <= n; i++) {\n            int m = ret.size();\n            for (int j = m - 1; j >= 0; j--) {\n                ret.add(ret.get(j) | (1 << (i - 1)));\n            }\n        }\n        return ret;\n    }\n}', '{\"message\":\"Wrong Answer\"}', 2, 1764272198899277825, 1754516326912438274, '2024-03-03 21:30:39', '2024-03-03 21:30:40', 0);
INSERT INTO `question_submit` VALUES (1764282778792046594, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(grayCode(a));\n    }\n    public static int hammingWeight(int n) {\n        int ret = 0;\n        for (int i = 0; i < 32; i++) {\n            if ((n & (1 << i)) != 0) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n\n}', '{\"message\":\"Compile Error\"}', 2, 1764282558662389761, 1754516326912438274, '2024-03-03 21:32:47', '2024-03-03 21:32:48', 0);
INSERT INTO `question_submit` VALUES (1764282956752171009, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(hammingWeight(a));\n    }\n    public static int hammingWeight(int n) {\n        int ret = 0;\n        for (int i = 0; i < 32; i++) {\n            if ((n & (1 << i)) != 0) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n\n}', '{\"message\":\"Wrong Answer\"}', 2, 1764282558662389761, 1754516326912438274, '2024-03-03 21:33:30', '2024-03-03 21:33:31', 0);
INSERT INTO `question_submit` VALUES (1764283586434641922, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(hammingWeight(a));\n    }\n    public static int hammingWeight(int n) {\n        int ret = 0;\n        for (int i = 0; i < 32; i++) {\n            if ((n & (1 << i)) != 0) {\n                ret++;\n            }\n        }\n        return ret;\n    }\n\n}', '{\"message\":\"Wrong Answer\"}', 2, 1764282558662389761, 1754516326912438274, '2024-03-03 21:36:00', '2024-03-03 21:36:01', 0);
INSERT INTO `question_submit` VALUES (1764284899012718594, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(grayCode(a));\n    }\n    public static int countPrimes(int n) {\n        int ans = 0;\n        for (int i = 2; i < n; ++i) {\n            ans += isPrime(i) ? 1 : 0;\n        }\n        return ans;\n    }\n\n    public static boolean isPrime(int x) {\n        for (int i = 2; i * i <= x; ++i) {\n            if (x % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}', '{\"message\":\"Compile Error\"}', 2, 1764284847997399041, 1754516326912438274, '2024-03-03 21:41:13', '2024-03-03 21:41:13', 0);
INSERT INTO `question_submit` VALUES (1764285094463090690, 'java', 'public class Main {\n    public static void main(String[] args) {\n        Integer a= Integer.valueOf(args[0]);\n\n        System.out.println(countPrimes(a));\n    }\n    public static int countPrimes(int n) {\n        int ans = 0;\n        for (int i = 2; i < n; ++i) {\n            ans += isPrime(i) ? 1 : 0;\n        }\n        return ans;\n    }\n\n    public static boolean isPrime(int x) {\n        for (int i = 2; i * i <= x; ++i) {\n            if (x % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}', '{\"message\":\"Accepted\"}', 2, 1764284847997399041, 1754516326912438274, '2024-03-03 21:42:00', '2024-03-03 21:42:00', 0);
INSERT INTO `question_submit` VALUES (1764592329072390145, 'java', 'public class Main {\n    public static void main(String[] args) {\n        // String a = args[0];\n        // String b = args[1];\n        int a = 1 / 0;\n        // System.out.println(a+b);\n    }\n}', '{\"message\":\"Wrong Answer\"}', 2, 1754780655998218241, 1754516326912438274, '2024-03-04 18:02:50', '2024-03-04 18:02:51', 0);

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` bigint NOT NULL AUTO_INCREMENT COMMENT 'id',
  `userAccount` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '账号',
  `userPassword` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '密码',
  `unionId` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '微信开放平台id',
  `mpOpenId` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '公众号openId',
  `userName` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '用户昵称',
  `userAvatar` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '用户头像',
  `userProfile` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT '用户简介',
  `userRole` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'user' COMMENT '用户角色：user/admin/ban',
  `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `isDelete` tinyint NOT NULL DEFAULT 0 COMMENT '是否删除',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_unionId`(`unionId` ASC) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1763893686170316803 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci COMMENT = '用户' ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (1754516326912438274, 'senfan', 'ec1e663875680d09d9a36a996c85710d', NULL, NULL, 'senfan', 'http://118.178.234.75/images/qKvKXB32-images.png', '111', 'admin', '2024-02-05 22:44:24', '2024-03-02 20:12:16', 0);
INSERT INTO `user` VALUES (1754516326912438275, 'senfan01', 'ec1e663875680d09d9a36a996c85710d', NULL, NULL, 'senfan01', 'http://127.0.0.1:8101/api/user/ZiaW5fAZ-test.jpg', NULL, 'user', '2024-02-06 16:48:50', '2024-02-20 14:50:15', 0);
INSERT INTO `user` VALUES (1757387521761341441, 'senfan02', 'b0dd3697a192885d7c055db46155b26a', NULL, NULL, NULL, 'http://127.0.0.1:8101/api/user/ZiaW5fAZ-test.jpg', NULL, 'user', '2024-02-13 20:53:30', '2024-02-20 14:50:15', 0);
INSERT INTO `user` VALUES (1759079214848004098, 'senfan03', 'ec1e663875680d09d9a36a996c85710d', NULL, NULL, 'senfan03', 'http://127.0.0.1:8101/api/user/ZiaW5fAZ-test.jpg', NULL, 'user', '2024-02-18 12:55:41', '2024-02-20 14:50:15', 0);
INSERT INTO `user` VALUES (1763893686170316802, '111111111', '54116f4e9ecfeb9b816a78d9e452afd7', NULL, NULL, '1', NULL, NULL, 'user', '2024-03-02 19:46:41', '2024-03-02 19:46:41', 0);

SET FOREIGN_KEY_CHECKS = 1;
